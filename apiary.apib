FORMAT: 1A

# MXcloud Data Collection
MXcloud Data Collection Related API.

Resources provided by Cloud Gateway are categorized in */mxc/** related resources.

Resources provided by Cloud Server are categorized in */mxcs/** related resources.

# group MXC Settings

## MXC Configuration [/mxc/config]

### Get Configuration [GET]

+ Response 200 (application/json)

        {
            "aliveReportPeriodSec": 30,
            "sensorDataForwardCron": "* * * * *",
            "sensorDataExpireTimeSec": 86400
        }

### Update Configuration [PUT]

+ Request (application/json)

        {
            "aliveReportPeriodSec": 30,
            "sensorDataForwardCron": "* * * * *",
            "sensorDataExpireTimeSec": 86400
        }

+ Response 200 (application/json)

        {
            "aliveReportPeriodSec": 30,
            "sensorDataForwardCron": "* * * * *",
            "sensorDataExpireTimeSec": 86400
        }

# group Reading Drop Count

## Drop Count [/mxc/dropcount]

### Get Drop Count [GET]

Response Attribute:
- *storDropCount*: required, integer. Number of Readings dropped, caused by out-of-storage.
- *fwdDropCount*: required, integer. Number of Readings dropped, caused by readings-expired.

+ Response 200 (application/json)

        {
            "storDropCount": 120,
            "fwdDropCount": 99
        }

# group Scheduled Jobs

## Scheduled Jobs Configuration [/mxc/schedules]

### Get Multiple Job Configurations [GET]

Response Attribute:
- *id*: required, integer, start from 0.
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *schedule*: required, object.
    - *type*: required, string. Should be one of "cron", "periodical-sec" or "startup".
    - *time*: required when *type="cron"*, cron schedule string.
    - *sec*: required when *type="periodical-sec"*, integer. Period second.
    - *mode*: required when *type="periodical-sec"*. Should be one of the following:
        - *SCHEDULE_FIRST*: schedule the job for future triggering.
        - *TRIGGER_FIRST*: trigger the job after the configurations were loaded.
- *isRunning*: required, boolean. Indicates whether the job is running.
- *executionCount*: required, integer.
- *lastExecution*: required, object. If the job hasn't been executed yet, the content would be empty.
    - *startTime*: optional, datetime string("yyyy-mm-ddThh:mm:ss.xxxxxxZ")
    - *endTime*: optional, datetime string("yyyy-mm-ddThh:mm:ss.xxxxxxZ")
    - *exitStatus*: optional, integer.
        - *0*: Last execution success.
        - *others*: Last execution failed.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Read Register Data",
                "command": "bin/ansi --read-register-data",
                "logCount": 30,
                "schedule":
                {
                    "type": "cron",
                    "time": "0 * * * *"
                },
                "isRunning": false,
                "executionCount": 15,
                "lastExecution":
                {
                    "startTime": "2014-11-24T04:42:17.260861Z",
                    "endTime": "2014-11-24T04:42:19.073265Z",
                    "exitStatus": 0
                }
            },
            {
                "id": 2,
                "name": "Read Load Profile",
                "command": "bin/ansi --read-load-profile",
                "logCount": 30,
                "schedule":
                {
                    "type": "periodical-sec",
                    "sec": 900,
                    "mode": "SCHEDULE_FIRST"
                },
                "isRunning": false,
                "executionCount": 0,
                "lastExecution": {}
            },
            {
                "id": 3,
                "name": "Read ioLogik E2242",
                "command": "iologik_e2242",
                "logCount": 30,
                "schedule":
                {
                    "type": "periodical-sec",
                    "sec": 1,
                    "mode": "TRIGGER_FIRST"
                },
                "isRunning": false,
                "executionCount": 0,
                "lastExecution": {}
            }
        ]


### Update Multiple Job Configurations [PUT]

Request Attribute:
- *id*: required, integer, start from 0.
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *schedule*: required, object.
    - *type*: required, string. Should be one of "cron", "periodical-sec" or "startup".
    - *time*: required when *type="cron"*, cron schedule string.
    - *sec*: required when *type="periodical-sec"*, integer. Period second.
    - *mode*: required when *type="periodical-sec"*. Should be one of the following:
        - *SCHEDULE_FIRST*: schedule the job for future triggering.
        - *TRIGGER_FIRST*: trigger the job after the configurations were loaded.
- *isRunning*: optional, boolean. Ignored.
- *executionCount*: optional, integer. Ignored.
- *lastExecution*: optional, object. Ignored.

Response Attribute:

- Same as in *GET* response.

+ Request (application/json)

        [
            {
                "id": 1
                "name": "Read Register Data",
                "command": "/var/mxcc/bin/ansi --read-register-data",
                "logCount": 30,
                "schedule":
                {
                    "type": "cron",
                    "time": "0 * * * *"
                }
            },
            {
                "id": 2,
                "name": "Read Load Profile",
                "command": "/var/mxcc/bin/ansi --read-load-profile",
                "logCount": 30,
                "schedule":
                {
                    "type": "periodical-sec",
                    "sec": 900,
                    "mode": "SCHEDULE_FIRST"
                },
                "isRunning": false,
                "executionCount": 0,
                "lastExecution": {}
            }
        ]

+ Response 200 (application/json)

        [
            {
                "id": 1
                "name": "Read Register Data",
                "command": "/var/mxcc/bin/ansi --read-register-data",
                "logCount": 30,
                "schedule":
                {
                    "type": "cron",
                    "time": "0 * * * *"
                },
                "isRunning": false,
                "executionCount": 15,
                "lastExecution":
                {
                    "startTime": "2014-11-24T04:42:17.260861Z",
                    "endTime": "2014-11-24T04:42:19.073265Z",
                    "exitStatus": 0
                }
            },
            {
                "id": 2,
                "name": "Read Load Profile",
                "command": "/var/mxcc/bin/ansi --read-load-profile",
                "logCount": 30,
                "schedule":
                {
                    "type": "periodical-sec",
                    "sec": 900,
                    "mode": "SCHEDULE_FIRST"
                },
                "isRunning": false,
                "executionCount": 0,
                "lastExecution": {}
            }
        ]

### Create New Job [POST]

Request Attribute:
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *schedule*: required, object.
    - *type*: required, string. Should be one of "cron", "periodical-sec" or "startup".
    - *time*: required when *type="cron"*, cron schedule string.
    - *sec*: required when *type="periodical-sec"*, integer. Period second.
    - *mode*: required when *type="periodical-sec"*. Should be one of the following:
        - *SCHEDULE_FIRST*: schedule the job for future triggering.
        - *TRIGGER_FIRST*: trigger the job after the configurations were loaded.
- *isRunning*: optional, boolean. Ignored.
- *executionCount*: optional, integer. Ignored.
- *lastExecution*: optional, object. Ignored.

Response Attribute:
- Same as *GET* response.

+ Request (application/json)

        {
            "name": "Read Register Data",
            "command": "/var/mxcc/bin/ansi --read-register-data",
            "logCount": 30,
            "schedule":
            {
                "type": "cron",
                "time": "0 * * * *"
            }
        }

+ Response 200 (application/json)

        {
            "id": 5,
            "name": "Read Register Data",
            "command": "/var/mxcc/bin/ansi --read-register-data",
            "logCount": 30,
            "schedule":
            {
                "type": "cron",
                "time": "0 * * * *"
            },
            "isRunning": false,
            "executionCount": 0,
            "lastExecution": {}
        }

## Scheduled Job Configuration [/mxc/schedules/{id}]

### Get Single Job Configuration [GET]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Read Register Data",
            "command": "bin/ansi --read-register-data",
            "schedule":
            {
                "type": "cron",
                "time": "0 * * * *"
            }
        }

### Update Single Job Configuration [PUT]

+ Request (application/json)

        {
            "id": 1,
            "name": "Read Register Data",
            "command": "bin/ansi --read-register-data",
            "schedule":
            {
                "type": "cron",
                "time": "0 * * * *"
            }
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Read Register Data",
            "command": "bin/ansi --read-register-data",
            "schedule":
            {
                "type": "cron",
                "time": "0 * * * *"
            }
        }

### Delete Single Job Configuration [DELETE]

+ Response 200 (application/json)

        {
            "message": "Delete scheduler job on cg-123456789715 successfully."
        }

## Log Management [/mxc/schedules/{sched_id}/logs?page_size={page_size}&page={page}]

### Get Log List [GET]

Query String Arguments:
- *{page_size}*: Default *30*.
- *{page}*: Start from *1*. Default *1*.

Log list returned is ordered by *startTime* in decending order.

+ Response 200 (application/json)

        {
            "total_count": 40,
            "page_size": 30,
            "page": 1,
            "logs":
            [
                {
                    "id": "20141124045217",
                    "startTime": "2014-11-24T04:52:17Z",
                    "endTime": "2014-11-24T04:53:17Z",
                    "exitStatus": 127
                },
                {
                    "id": "20141124044217",
                    "startTime": "2014-11-24T04:42:17Z",
                    "endTime": "2014-11-24T04:43:17Z",
                    "exitStatus": 0
                }
            ]
        }

### Retrieve Single Log File [POST]

This request causes Cloud Gateway to upload the *Log File* to the designated *url*.

+ Request (application/json)

        {
            "url": "https://mxc-cs/log/upload/JEJC9bbc832k1Sc"
        }

+ Response 200 (application/json)

        {
            "startTime": "2014-12-03T04:42:17.260861Z",
            "endTime": "2014-12-03T04:48:36.992303Z",
            "url": "https://mxc-cs/log/upload/JEJC9bbc832k1Sc"
        }

# group Trigger Jobs
After Custom Bundle upload to CG, CG will decompress the Custom Bundle.

But **NO** any Trigger Configuration will be created.

All Trigger Configuration **NEED** be created from WEB by using **POST** API.

## Trigger Jobs Configuration [/trigger/jobs]

### Get Multiple Job Configurations [GET]

Response Attribute:
- *id*: required, integer, start from 0.
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *isRunning*: required, boolean. Indicates whether the job is running.
- *executionCount*: required, integer. Number of times the job is executed.
- *lastExecution*: require, object.
    - *startTime*: optional, string in *Datetime* format.
    - *endTime*: optional, string in *Datetime* format.
    - *exitStatus*: optional, integer.
        - *0*: Last execution success.
        - *others*: Last execution fail.

+ Response 200 (application/json)

        [
            {
                "id": 0,
                "name": "Read Register Data",
                "command": "bin/ansi --read-register-data",
                "logCount": 30,
                "isRunning": false,
                "executionCount": 15,
                "lastExecution":
                {
                    "startTime": "2014-11-24T04:42:17.260861Z",
                    "endTime": "2014-11-24T04:42:19.073265Z",
                    "exitStatus": 0
                }
            },
            {
                "id": 1,
                "name": "Read Load Profile",
                "command": "bin/ansi --read-load-profile",
                "logCount": 30,
                "isRunning": false,
                "executionCount": 0,
                "lastExecution": {}
            }
        ]

### Update Multiple Job Configurations [PUT]
All the jobs in CG would be replaced.

Request Attribure:
- *id*: required, integer, start from 0.
- *name*: required, string.
- *command*: required, string.
- *logCount*: required, integer.
- *isRunning*: optional, boolean. Ignored.
- *executionCount*: optional, integer. Ignored.
- *lastExecution*: optional, object. Ignored.

Response Attribute:
- Same as *GET* request.

+ Request (application/json)

        [
            {
                "id": 4,
                "name": "Hello world",
                "command": "/var/mxcc/bin/ansi --read-register-data",
                "isRunning": false,
                "logCount": 30,
                "executionCount": 0,
                "lastExecution": {}
            },
            {
                "id": 7,
                "name": "Read Load Profile",
                "command": "/var/mxcc/bin/ansi --read-load-profile",
                "logCount": 30,
                "executionCount": 15,
                "lastExecution":
                {
                    "startTime": "2014-11-24T04:42:17.260861Z",
                    "endTime": "2014-11-24T04:42:19.073265Z",
                    "exitStatus": 0
                }
            }
        ]

+ Response 200 (application/json)

        [
            {
                "id": 4,
                "name": "Hello world",
                "command": "/var/mxcc/bin/ansi --read-register-data",
                "isRunning": false,
                "logCount": 30,
                "executionCount": 0,
                "lastExecution": {}
            },
            {
                "id": 7,
                "name": "Read Load Profile",
                "command": "/var/mxcc/bin/ansi --read-load-profile",
                "isRunning": false,
                "logCount": 30,
                "executionCount": 15,
                "lastExecution":
                {
                    "startTime": "2014-11-24T04:42:17.260861Z",
                    "endTime": "2014-11-24T04:42:19.073265Z",
                    "exitStatus": 0
                }
            }
        ]

### Create New Job [POST]

Request Attribure:
- Same as *PUT* request.

Response Attribute:
- Same as *GET* request.

+ Request (application/json)

        {
            "name": "Hello world",
            "command": "bin/ansi --read-load-profile",
            "logCount": 30,
        }

+ Response 200 (application/json)

        {
            "id": 8,
            "name": "Hello world",
            "command": "bin/ansi --read-load-profile",
            "isRunning": false,
            "logCount": 30,
            "executionCount": 0,
            "lastExecution": {}
        }

## Job [/trigger/jobs/{id}]

### Get Single Job Configuration [GET]

+ Response 200 (application/json)

        {
            "id": 7,
            "name": "Read Load Profile",
            "command": "bin/ansi --read-load-profile"
            "isRunning": false,
            "logCount": 30,
            "executionCount": 15,
            "lastExecution":
            {
                "startTime": "2014-11-24T04:42:17.260861Z",
                "endTime": "2014-11-24T04:42:19.073265Z",
                "exitStatus": 0
            }
        }

### Update Single Job Configuration [PUT]

+ Request (application/json)

        {
            "id": 7,
            "name": "Hello world",
            "command": "bin/ansi --read-load-profile"
            "isRunning": false,
            "logCount": 30,
            "executionCount": 15,
            "lastExecution":
            {
                "startTime": "2014-11-24T04:42:17.260861Z",
                "endTime": "2014-11-24T04:42:19.073265Z",
                "exitStatus": 0
            }
        }

+ Response 200 (application/json)

        {
            "id": 7,
            "name": "Read Load Profile",
            "command": "bin/ansi --read-load-profile"
            "isRunning": false,
            "logCount": 30,
            "executionCount": 15,
            "lastExecution":
            {
                "startTime": "2014-11-24T04:42:17.260861Z",
                "endTime": "2014-11-24T04:42:19.073265Z",
                "exitStatus": 0
            }
        }

### Delete Single Job [DELETE]

+ Response 200 (application/json)

        {
            "message": "Delete trigger-job on cg-123456789715 successful."
        }

## On-demand Trigger [/trigger/jobs/{id}/trigger]

### Trigger Single Job to execute [POST]

Response Attribute:
- *startTime*: required, datetime string(yyyy-mm-ddThh:mm:ss.xxxxxZ)
- *endTime*: required, datetime string(yyyy-mm-ddThh:mm:ss.xxxxxZ)
- *exitStatus*: required, integer.
    - *0*: Last execution success.
    - *others*: Last execution fail.

+ Response 200 (application/json)

        {
            "startTime": "2014-11-24T04:42:17.260861Z",
            "endTime": "2014-11-24T04:42:19.073265Z",
            "exitStatus": 0
        }

## Log Management [/trigger/jobs/{job_id}/logs?page_size={page_size}&page={page}]

### Get Log List [GET]

Query String Attributes:
- {page_size}: Default *30*.
- {page}: Start from *1*. Default *1*.

Log list returned is ordered by startTime in decending order.

+ Response 200 (application/json)

        {
            "total_count": 40,
            "page_size": 30,
            "page": 1,
            "logs":
            [
                {
                    "id": "20141124045217",
                    "startTime": "2014-11-24T04:52:17Z",
                    "endTime": "2014-11-24T04:53:17Z",
                    "exitStatus": 127
                },
                {
                    "id": "20141124044217",
                    "startTime": "2014-11-24T04:42:17Z",
                    "endTime": "2014-11-24T04:43:17Z",
                    "exitStatus": 0
                }
            ]
        }

### Retrieve Single Log File [POST]

This request causes Cloud Gateway to upload the *Log File* to the designated *url*.

+ Request (application/json)

        {
            "url": "https://mxc-cs/log/upload/JEJC9bbc832k1Sc"
        }

+ Response 200 (application/json)

        {
            "startTime": "2014-12-03T04:42:17.260861Z",
            "endTime": "2014-12-03T04:48:36.992303Z",
            "url": "https://mxc-cs/log/upload/JEJC9bbc832k1Sc"
        }

# group Custom Bundle Management

## Custom Bundle [/mxc/custom-bundle]

### Get Custom Bundle Information [GET]

Get information about currently deployed client-bundle.

+ Response 200 (application/json)

        {
            "name": "my-application-bundle.tgz",
            "url": "https://mxc-cs/client-bundles/UD63CVU7QPLE"
        }

## Deploy Custom Bundle [/mxc/custom-bundle/update]

### Request Deployment [POST]

Starting a request while a previous request is in progress, results in error.

+ Request (application/json)

        {
            "name": "my-application-bundle.tgz",
            "url": "https://mxc-cs/client-bundles/UD63CVU7QPLE"
        }

+ Response 200 (application/json)

### Get Deployment Status [GET]

- *progress*: required, float. Indcating overall progress, *1.0* indicates complete.
- *status*: required, string. Can be one of "idle", "inprogress", "failed".

+ Response 200 (application/json)

        {
            "name": "my-application-bundle.tgz",
            "url": "https://mxc-cs/client-bundles/UD63CVU7QPLE",
            "progress": 0.39,
            "status": "inprogress"
        }

# group Manage Groups in CS

## Groups Collection [/mxcs/groups?page_size={page_size}&page={page}]

Query Attribute:
- page: optional, integer. Default *1*.
- page_size: optional, integer. Default *10*.

### Get Groups List [GET]

Response Attribute:
- *totalCount*: required, integer.
- *pageSize*: required, integer.
- *page*: required, integer.
- *date*: required, list type. (If no groups will return [])
    - *gid*: required, integer. Group ID. (gid=1, type=gateway) != (gid=1, type=equipmet) they are 2 different resource.
    - *name*: required, string. Group name.
    - *type*: required, string([gateways|equipments]). Group item's type.
    - *list*: required, string list. Either GatewayIDs or EquipmentIDs, according to *type*.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "data": [
                {
                    "gid": 1,
                    "name": "CG_Group",
                    "type": "gateways",
                    "list": [
                        "cg-0090E8000001",
                        "cg-0090E8000002",
                        "cg-0090E8000003"
                    ]
                },
                {
                    "gid":1,
                    "name": "Eq_Group",
                    "type": "equipments",
                    "list": [
                        "uc-8100-0090E8000001",
                        "iologik-e2243-1",
                        "uc-8100-0090E8000002",
                        "meter-protecsa-1"
                    ]
                }
            ]
        }

## Group Creation [/mxcs/groups]

### Create New Group [POST]

Request Attribute:
- *name*: required, string. Group name.
- *type*: required, string([gateways|equipments]). Group item's type.
- *list*: required, string list.

Response Attribute:
- *gid*: required, integer. Group ID. (gid=1, type=gateway) != (gid=1, type=equipmet) they are 2 different resource.
- *name*: required, string. Group name.
- *type*: required, string([gateways|equipments]). Group item's type.
- *list*: required, string list.

+ Request (application/json)

        {
            "name": "Eq_Group",
            "type": "equipments",
            "list": [
                "uc-8100-0090E8000001",
                "iologik-e2243-1",
                "uc-8100-0090E8000002",
                "meter-protecsa-1"
            ]
        }

+ Response 200 (appliation/json)

        {
            "gid": 1,
            "name": "Eq_Group",
            "type": "equipments",
            "list": [
                "uc-8100-0090E8000001",
                "iologik-e2243-1",
                "uc-8100-0090E8000002",
                "meter-protecsa-1"
            ]
        }

## Specific Group Info [/mxcs/groups/{gid}?type={type}]

*gid*: Group ID.

Query Attribute:
- *type*: required, string([gateway|equipment]). Group Type.

### Modify Group [PUT]

Request Attribute:
- *gid*: required, integer. Group ID. (gid=1, type=gateway) != (gid=1, type=equipmet) they are 2 different resource.
- *name*: required, string. Group name.
- *type*: required, string([gateways|equipments]). Group item's type.
- *list*: required, string list.

Response Attribute:
- *gid*: required, integer. Group ID, (gid=1, type=gateway) != (gid=1, type=equipmet) they are 2 different resource.
- *name*: required, string. Group name.
- *type*: required, string([gateways|equipments]). Group item's type.
- *list*: required, string list.

+ Request (application/json)

        {
            "gid": 1,
            "name": "Eq_Group",
            "type": "equipments",
            "list": [
                "uc-8100-0090E8000001",
                "iologik-e2243-1",
                "uc-8100-0090E8000002",
                "meter-protecsa-1"
            ]
        }

+ Response 200 (appliation/json)

        {
            "gid": 1,
            "name": "Eq_Group",
            "type": "equipments",
            "list": [
                "uc-8100-0090E8000001",
                "iologik-e2243-1",
                "uc-8100-0090E8000002",
                "meter-protecsa-1"
            ]
        }

### Delete Group [DELETE]

+ Response 200 (application/json)

        {
            "message": "Delete Group ID={gid} OK"
        }

# group Profile of Equipments and CGs

## All CGs [/mxcs/profile/cgs]

### Get Specific Group information [GET]

Response Attribute:
- gatewayOnlineCount: required, integer.
- gatewayTotalCount: required, integer.
- equipmentOnlineCount: required, integer.
- equipmentTotalCount: required, integer.

Note:
- CG Online Rate = "gatewayOnlineCount"/"gatewayTotalCount"

+ Response 200 (application/json)

    + Body

            {
                "gatewayOnlineCount": 9,
                "gatewayTotalCount": 10,
                "equipmentOnlineCount": 15,
                "equipmentTotalCount": 20
            }

## Specific CG [/mxcs/profile/cgs/{cgName}]

cgName: CG Name.

### Get Specific Group information [GET]

Response Attribute:
- status: required, string([online|offline])
- equipmentOnlineCount: required, integer.
- equipmentTotalCount: required, integer.

TODO:
- How to calculate "CG Online Count"

+ Response 200 (application/json)

    + Body

            {
                "status": "online",
                "equipmentOnlineCount": 15,
                "equipmentTotalCount": 20
            }

## All Equipments [/mxcs/profile/equipments]

### Get Specific Group information [GET]

Response Attribute:
- equipmentOnlineCount: required, integer.
- equipmentTotalCount: required, integer.

+ Response 200 (application/json)

    + Body

            {
                "equipmentOnlineCount": 15,
                "equipmentTotalCount": 20
            }

## Specific Equipments [/mxcs/profile/equipments/{equipmentName}]

equipmentName: Equipment Name.

### Get Specific Group information [GET]

Response Attribute:
- status: required, string([online|offline])

+ Response 200 (application/json)

    + Body

            {
                "status": "online"
            }

## Groups of CGs [/mxcs/profile/groups/cgs/{gid}]

gid: required, integer.

### Get Specific Group information [GET]

Response Attribute:
- groupName: required, string.
- gatewayOnlineCount: required, integer.
- gatewayTotalCount: required, integer.
- equipmentOnlineCount: required, integer.
- equipmentTotalCount: required, integer.

Note:
- CG Online Rate = "gatewayOnlineCount"/"gatewayTotalCount"

+ Response 200 (application/json)

    + Body

            {
                "groupName": "CG-Group-1"
                "gatewayOnlineCount": 9,
                "gatewayTotalCount": 10,
                "equipmentOnlineCount": 15,
                "equipmentTotalCount": 20
            }

## Groups of Equipments [/mxcs/profile/groups/equipments/{gid}]

gid: required, integer.

### Get Specific Group information [GET]

Response Attribute:
- groupName: required, string.
- equipmentOnlineCount: required, integer.
- equipmentTotalCount: required, integer.

+ Response 200 (application/json)

    + Body

            {
                "groupName": "EQ-Group-1",
                "equipmentOnlineCount": 15,
                "equipmentTotalCount": 20
            }

# group Cloud Gateway Management

## Get Cloud Gateway List [/mxcs/cgs?gid={gid}&page_size={page_size}&page={page}]

Query Attribute:
- *gid*: optional, integer. If given, only CGs in the given group are returned.
- *page*: optional, integer. Default *1*.
- page_size: optional, integer. Default *10*.

### Get CG List from Table [GET]

Response Attribute:
- *totalCount*: required, integer. Number of CGs in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *onlineCount*: required, integer. Number of CGs that is currently online.
- *data*: required, object list.
    - *cgName*: required. CG ID of each authorized CG.
    - *status*: required, string([online|offline])

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "onlineCount": 2,
            "data": [
                {
                    "cgName": "cg-0090E8001234",
                    "status": "online"
                },
                {
                    "cgName": "cg-0090E8004321",
                    "status": "online"
                }
            ]
        }

## CG Insert [/mxcs/cgs]

### Create new Cloud Gateway [POST]

Request Attribute:
- *cgName*: required. ID of the CG to be created.

Response Attribute
- *cgName*: required. ID of the CG just created.

+ Request (application/json)

        {
            "cgName": "cg-0090E8001234"
        }

+ Response 200 (application/json)

        {
            "cgName": "cg-0090E8001234"
        }

## Cloud Gateway Management [/mxcs/cgs/{cg_name}]

- *cg_name*: required. ID of the CG to be queried.

### Get Cloud Gateway Information [GET]

Response Attribute:
- *status*: required, string([online|offline]).
- *equipmentTotalCount*: required, integer. Number of equipments, related to CG.
- *equipmentOnlineCount*: required, integer. Number of equipments, related to CG, that are currently online.

+ Response 200 (application/json)

        {
            "status": "online",
            "equipmentTotalCount": 20
            "equipmentOnlineCount": 15,
        }

### Delete Cloud Gateway [DELETE]

+ Response 200 (application/json)

        {
            "message": "Delete CG={cg_name} OK"
        }

# group Equipment Management

## Multiple Equipments [/mxcs/equipments?cg_name={cg_name}&gid={gid}&page_size={page_size}&page={page}]

Query Attribute:
- *cg_name*: optional, string. Only Equipments related to this Cloud Gateway is returned.
- *gid*: optional, integer. Only Equipments that are in the Group(type=*equipments*) are returned.
- *page*: optional, integer. Default *1*.
- *page_size*: optional, integer. Default *10*

### Get Equipment List [GET]

Response Attribute:
- *totalCount*: required, integer. Number of Equipments in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *onlineCount*: required, integer. Number of Equipments that are currently online.
- *data*: required, object list.
    - *name*: required, string. Equipment Name.
    - *readingCount*: required, integer.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "data": [
                {
                    "name": "uc-81xx-0090e800e5ee",
                    "status": "online",
                    "readingCount": 2048
                },
                {
                    "name": "iologik-e2242",
                    "status": "online",
                    "readingCount": 1037
                }
            ]
        }

## Single Equipment [/mxcs/equipments/{equipment_name}]

### Get Specific Equipment Information [GET]

Response Attribute:
- *status*: required, string([online|offline])
- *readingCount*: required, integer. Number of Readings reported by this Equipment.

+ Response 200 (application/json)

        {
            "status": "online",
            "readingCount": 28831
        }

# group Reading Management

## Channels [/mxcs/equipments/{equipment_name}/channels?page_size={page_size}&page={page}]

Resource Attribute:
- *equipment_name*: required, string.

Query Attribute:
- *page*: optional, integer. Default *1*.
- *page_size*: optional, integer. Default *10*.

### Get Channel List [GET]

Response Attribute:
- *totalCount*: required, integer. Number of Channels in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *data*: required, object list.
    - *name*: required, string. Channel name.
    - *value*: required, string or float. Latest value received.
    - *time*: required, string in Datetime format. Latest value received time.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "data": [
                {
                    "name": "ai0",
                    "value": 1.0264739990234375,
                    "time": "2015-01-14T07:43:46.814000Z"
                },
                {
                    "name": "di0",
                    "value": "on",
                    "time": "2015-01-14T10:08:51.181000Z"
                }
            ]
        }

## Readings [/mxcs/equipments/{equipment_name}/channels/{channel_name}/readings?start_time={start_time}&end_time={end_time}&page={page}&page_size={page_size}&asc={asc}]

Resource Attribute:
- *equipment_name*: required, string.
- *channel_name*: required, string.

Query Attribute:
- *start_time*: optional, string in Datetime format.
- *end_time*: optional, string in Datetime format.
- *page*: optional, integer. Default *1*.
- *page_size*: optional, integer. Default *10*.
- *asc*: optional, boolean. True: ascend(oldest first), False: descend(latest first). Default *False*.

### Query Sensor Data [GET]

Response Attribute:
- *totalCount*: required, integer. Number of Readings in the list.
- *pageSize*: required, integer.
- *page*: required, integer.
- *data*: required, object list.
    - *value*: required, string or float.
    - *time*: required, string in Datetime format.

+ Response 200 (application/json)

        {
            "totalCount": 2,
            "pageSize": 10,
            "page": 1,
            "data": [
                {
                    "value": 1.0255584716796875,
                    "time": "2015-01-14T10:08:51.181000Z"
                },
                {
                    "value": 1.0264739990234375,
                    "time": "2015-01-14T07:43:46.814000Z"
                }
            ]
        }


# group Cloud Server Configuration

## Configuration  [/mxcs/config]

### Get Configuration [GET]

Response Attribure
- *expireTimeDay*: required, integer. Reading expire time in days.

+ Response 200 (application/json)

        {
            "expireTimeDay": 90
        }

### Update Configuration [PUT]

Request Attribute:
- *expireTimeDay*: required, integer.

Response Attribute:
- *expireTimeDay*: required, integer.

+ Request (application/json)

        {
            "expireTimeDay": 90
        }

+ Response 200 (application/json)

        {
            "expireTimeDay": 90
        }

# Group CG Online Count

## CG Online Count [/mxcs/cgOnlineCount?gid={gid}&type={type}&endTime={endTime}&limit={limit}]

Query Attribute:
- gid: optional, integer. Group ID.
- type: optional, string([gateway|equipment]).
- endTime: required, timestamp. The last date's timestamp.
- limit: required. integer. Report data's number.

### Get CG Online Cout Data [GET]

Response Attribute:
- data: required. If no data will return [].
    - time: required, string.
    - value: required, decimal or string.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "time": 1422438015,
                        "value": 10
                    },
                    {
                        "time": 1422524415,
                        "value":11
                    },
                    {
                        "time": 1422610815,
                        "value":19
                    },
                    {
                        "time": 1422697215,
                        "value":12
                    },
                    {
                        "time": 1422783615,
                        "value":15
                    },
                    {
                        "time": 1422870015,
                        "value":20
                    },
                    {
                        "time": 1422956415,
                        "value":25
                    }
                ]
            }

# Group Equipment Online Count

## Equipment Online Count [/mxcs/equipmentOnlineCount?gid={gid}&type={type}&endTime={endTime}&limit={limit}]

Query Attribute:
- gid: optional, integer. Group ID.
- type: optional, string([gateway|equipment]).
- endTime: optional, timestamp(in milliseconds). The last date's timestamp.
- limit: optional, integer. Report data's number.

Default Query:
- gid: None
- type: None
- endTime: TimeStamp of NOW
- limit: 7

### Get Equipment Online Cout Data [GET]

Response Attribute:
- data: required. If no data will return [].
    - time: required, timestamp in milliseconds.
    - value: required, decimal or string.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "time": 1422438015000,
                        "value": 10
                    },
                    {
                        "time": 1422524415000,
                        "value":11
                    },
                    {
                        "time": 1422610815000,
                        "value":19
                    },
                    {
                        "time": 1422697215000,
                        "value":12
                    },
                    {
                        "time": 1422783615000,
                        "value":15
                    },
                    {
                        "time": 1422870015000,
                        "value":20
                    },
                    {
                        "time": 1422956415000,
                        "value":25
                    }
                ]
            }

# Group CG Data Row

## CG Data Row [/mxcs/cgDataRow?gid={gid}&type={type}&endTime={endTime}&limit={limit}]

Query Attribute:
- gid: optional, integer. Group ID.
- type: optional, string([gateway|equipment]).
- endTime: required, timestamp. The last date's timestamp.
- limit: required. integer. Report data's number.

### Get CG Data Row Data [GET]

Response Attribute:
- data: required. If no data will return [].
    - time: required, string.
    - value: required, decimal or string.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "time": 1422438015,
                        "value": 10
                    },
                    {
                        "time": 1422524415,
                        "value":11
                    },
                    {
                        "time": 1422610815,
                        "value":19
                    },
                    {
                        "time": 1422697215,
                        "value":12
                    },
                    {
                        "time": 1422783615,
                        "value":15
                    },
                    {
                        "time": 1422870015,
                        "value":20
                    },
                    {
                        "time": 1422956415,
                        "value":25
                    }
                ]
            }

# Group Equipment Data Row

## Equipment Data Row [/mxcs/equipmentDataRow?gid={gid}&type={type}&endTime={endTime}&limit={limit}]

Query Attribute:
- gid: optional, integer. Group ID.
- type: optional, string([gateway|equipment]).
- endTime: required, timestamp. The last date's timestamp.
- limit: required. integer. Report data's number.

### Get Equipment Data Row Data [GET]

Response Attribute:
- data: required. If no data will return [].
    - time: required, string.
    - value: required, decimal or string.

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "time": 1422438015,
                        "value": 10
                    },
                    {
                        "time": 1422524415,
                        "value":11
                    },
                    {
                        "time": 1422610815,
                        "value":19
                    },
                    {
                        "time": 1422697215,
                        "value":12
                    },
                    {
                        "time": 1422783615,
                        "value":15
                    },
                    {
                        "time": 1422870015,
                        "value":20
                    },
                    {
                        "time": 1422956415,
                        "value":25
                    }
                ]
            }
